---
import type { HTMLAttributes } from "astro/types";
import classnames from "classnames";
import { Icon, type IconProps } from "./Icon.tsx";
import type { Name as IconName } from "@icons/types";
import type { Accent } from "src/types";

interface Props extends HTMLAttributes<"a"> {
  type?: "primary" | "secondary" | "icon";
  accent?: Accent;
  icon?: IconName;
  iconProps?: Partial<IconProps>;
}

const {
  type = "primary",
  accent = "",
  icon,
  href,
  class: classProp,
  iconProps,
  ...rest
} = Astro.props;
const className = classnames("link", classProp, {
  "link--primary": type === "primary",
  "link--secondary": type === "secondary",
  "link--icon": type === "icon",
  "link--green": accent === "green",
  "link--pink": accent === "pink",
  "link--yellow": accent === "yellow",
});
---

<a href={href ?? ""} class={className} {...rest}>
  <!-- TODO solve type issue -->
  <!-- @ts-ignore -->
  {icon ? <Icon name={icon} {...(iconProps ? iconProps : {})} /> : null}
  {
    type !== "icon" ? (
      <span class="link__title">
        <slot />
      </span>
    ) : null
  }
</a>

<style lang="scss">
  .link {
    border-radius: 4px;
    color: var(--text-primary);
    cursor: pointer;
    font-size: 1rem;
    font-weight: 400;
    height: 100%;
    max-width: fit-content;
    outline: none;
    padding: 10px 25px;
    text-align: center;
    touch-action: manipulation;
    transform: translateY(0);
    transition:
      transform 0.15s,
      box-shadow 0.15s;
    user-select: none;
    display: flex;
    align-items: center;
    flex-direction: row;
    column-gap: 0.55rem;

    &--primary {
      background-color: var(--cyan-10);
      border: 1px solid var(--cyan-20);

      &:hover {
        background-color: var(--cyan-20);
      }

      &:hover:not(:disabled) {
        box-shadow: rgba(0, 0, 0, 0.15) 0 3px 9px 0;
        transform: translateY(-2px);
      }
    }

    &--green {
      background-color: var(--green-10);
      border: 1px solid var(--green-20);

      &:hover {
        background-color: var(--green-30);
      }
    }

    &--pink {
      background-color: var(--pink-10);
      border: 1px solid var(--pink-20);

      &:hover {
        background-color: var(--pink-20);
      }
    }

    &--yellow {
      background-color: var(--yellow-10);
      border: 1px solid var(--yellow-20);

      &:hover {
        background-color: var(--yellow-20);
      }
    }

    &:focus {
      outline: 3px solid #4369a8;
    }

    &--icon {
      padding: 0;
    }

    &--secondary {
      padding: 0;
      border-radius: 0;
      // display: inline-block;
      text-decoration: none;
      color: inherit;
      line-height: 1;

      &.contact-link {
        display: flex;
      }
    }

    &--secondary {
      .link__title {
        background: linear-gradient(0deg, var(--cyan-20), var(--cyan-20))
          no-repeat right bottom / 0 var(--bg-h);
        transition: background-size 350ms;
        padding-bottom: 2px;
        --bg-h: 4px;
      }
    }

    &--secondary:where(:hover, :focus-visible) {
      .link__title {
        background-size: 100% var(--bg-h);
        background-position-x: left;
      }
    }
  }
</style>
